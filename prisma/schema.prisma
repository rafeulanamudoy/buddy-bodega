datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  PENDING
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  nickName     String     @unique
  firstName    String
  lastName     String
  phone        String
  email        String     @unique
  password     String
  role         UserRole   @default(USER)
  customer     Customer?
  admin        Admin?
  status       UserStatus @default(PENDING) // Valid default value
  profileImage String?
  otp          String?
  otpExpiry    DateTime?
  identifier   String?
  customerId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model OtpModel {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  code      String
  otpExpiry DateTime?
}

// Customer model (extends User for customer-specific details)
model Customer {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  user  User?  @relation(fields: [email], references: [email])

  address                        String
  city                           String
  state                          String
  zipCode                        String
  socialMediaType                String
  socialMediaName                String
  uploadId                       String?
  uploadSelfieId                 String?
  review                         ReviewModel[]
  familiarityType                FamiliarityType?
  experienceEffect               ExperienceEffect[]
  terpeneProfile                 TerpeneProfile[]
  differentCategories            INTERESTEDCATEGORIES[]
  strain                         Strain[]
  tasteFlavor                    TasteFlavor[]
  oftenConsume                   OftenConsume?
  typicallyConsume               TypicallyConsume?
  californiaProducts             CaliforniaProducts?
  newProductsInDifferentCategory NewProductsInDifferentCategory?
  typicalProducts                TypicalProducts?
  popularProducts                PopularProducts?
  staffFavorites                 StaffFavorites?
  cart                           CartModel[]
  orders                         OrderModel[]
  transactions                   TransactionModel[]
  // invoice                        Invoice[]
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt

  @@map("customers")
}

// Admin model (extends User for admin-specific details)
model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  nickName String @unique
  email    String @unique
  user     User?  @relation(fields: [email], references: [email])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// Product model


// Category model
model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String    @unique
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("categories")
}

// Brand model
// model Brand {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   brandName  String @unique
//   brandImage String
//   products   Product[]
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt

//   @@map("brands")
// }

// CartModel (Tracks items added to a user's cart)
model CartModel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int

  customerId String   @db.ObjectId
  productId  String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("cartModels")
}

model OrderProduct {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  productId String     @db.ObjectId
  product   Product    @relation(fields: [productId], references: [id])
  productQuantity  Int
  orderId   String     @db.ObjectId
  order     OrderModel @relation(fields: [orderId], references: [id])

  @@map("order_products ")
}

// OrderModel (Represents a customer's order)
model OrderModel {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String             @db.ObjectId
  customer      Customer           @relation(fields: [customerId], references: [id])
  // products      Json
  totalAmount   Float
  status        OrderStatus        @default(PENDING)
  couponId      String?            @db.ObjectId
  coupon        Coupon?            @relation(fields: [couponId], references: [id])
  transactions  TransactionModel[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  // Invoice      Invoice[]
  OrderProducts OrderProduct[]

  @@map("orders")
}
model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  mainPrice     Float
  productImage  String
  discountPrice Float?        @default(0)
  status        ProductStatus @default(ACTIVE)
  details       String
  categoryId    String        @db.ObjectId
  category      Category      @relation(fields: [categoryId], references: [id])
  brandName     String
  // brandId       String?       @db.ObjectId

  // brand         Brand?        @relation(fields: [brandId], references: [id])

  reviews       ReviewModel[]
  carts         CartModel[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OrderProducts OrderProduct[]

  @@map("products")
}

// TransactionModel (Tracks payments for orders)
model TransactionModel {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  customerId String     @db.ObjectId
  orderId    String     @db.ObjectId
  customer   Customer   @relation(fields: [customerId], references: [id])
  order      OrderModel @relation(fields: [orderId], references: [id])

  amount          Float
  paymentMethod   String
  // recipient       String
  transactionDate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transactions")
}

// BillingAddress (Stores billing address for an order)
model BillingAddress {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  city        String
  state       String
  zipCode     String
  address     String
  phoneNumber String

  // Invoice   Invoice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billingAddress")
}

// ReviewModel (Tracks product reviews by customers)
model ReviewModel {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  review     String
  productId  String   @db.ObjectId
  customerId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

// model Invoice {
//   id               String          @id @default(auto()) @map("_id") @db.ObjectId
//   orderId          String          @db.ObjectId
//   order            OrderModel      @relation(fields: [orderId], references: [id])
//   customerId       String          @db.ObjectId
//   customer         Customer        @relation(fields: [customerId], references: [id])
//   invoiceNumber    String          @unique
//   billingAddressId String?         @db.ObjectId
//   billingAddress   BillingAddress? @relation(fields: [billingAddressId], references: [id])
//   amount           Float
//   createdAt        DateTime        @default(now())
//   updatedAt        DateTime        @updatedAt

//   @@map("invoices")
// }

model Coupon {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  code           String             @unique
  discountType   CouponDiscountType
  discountValue  Float
  minOrderAmount Float?
  usageLimit     Int?
  usedCount      Int                @default(0)
  expirationDate DateTime
  status         CouponStatus       @default(ACTIVE)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  orders         OrderModel[]

  @@map("coupons")
}

// enum BrandName {
//   Flamez
// }

enum CouponDiscountType {
  PERCENTAGE
  FIXED
}

enum ProductStatus {
  ACTIVE
  UPCOMING
  SELLING
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  INACTIVE
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum FamiliarityType {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum ExperienceEffect {
  ALL
  SENSUAL
  HUNGRY
  CREATIVE
  CALM
  MINDFUL
  MOTIVATED
  ALERT
  WORRIED
  STONED
  HAPPY
  ENERGIZED
  RELAXED
  EUPHORIC
  NULL
}

enum TerpeneProfile {
  ALL
  APPLE
  BANANA
  BERRY
  CANDY
  EARTHY
  FLORAL
  GASSY
  GRAPES
  LEMON
  MINT
  NUTTY
  ORANGE
  PEACH
  PEPPERY
  PINE
  STRAWBERRY
  SWEET
  WOOD
}

enum INTERESTEDCATEGORIES {
  ALL
  FLOWER
  EDIBLES
  VAPES
  CONCENTRATES
  PREROLLS
}

enum Strain {
  INDICA
  SATIVA
  HYBRID
  SATIVADOMINANT
  INDICADOMINANT
  NO
}

enum TasteFlavor {
  ALOT
  KINDOF
  NOTATALL
}

enum OftenConsume {
  EVERYDAY
  Often
  SOMETIMES
  RARELY
  NEVER
}

enum TypicallyConsume {
  DAYTIME
  MIDDAY
  NIGHTTIME
  ANYTIME
}

enum CaliforniaProducts {
  YES
  NO
}

enum NewProductsInDifferentCategory {
  YES
  NO
}

enum TypicalProducts {
  HIGHEND
  MIDRANGE
  BUDGET
  NOBUDGET
}

enum PopularProducts {
  YES
  KINDOF
  DOESNOTREALLYMATTER
  NO
}

enum StaffFavorites {
  YES
  NO
}
