datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model (common base for both Admin and Customer roles)
model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  username  String     @unique
  phone     String
  email     String     @unique
  password  String
  role      UserRole   @default(USER)
  customer  Customer?
  admin     Admin?
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

// Customer model (extends User for customer-specific details)
model Customer {
  id                            String     @id @default(auto()) @map("_id") @db.ObjectId
  email                         String     @unique
  user                          User?      @relation(fields: [email], references: [email])
  firstName                     String
  lastName                      String
  address                       String
  city                          String
  state                         String
  zipCode                       String
  socialMedia                   Json       @default("[]")
  uploadId                      String
  uploadSelfieId                String
  review                        ReviewModel[]
  familiarityType               FamiliarityType
  experienceEffect              ExperienceEffect
  terpeneProfile                TerpeneProfile
  categories                    Categories
  strain                        Strain
  tasteFlavor                   TasteFlavor
  oftenConsume                  OftenConsume
  typicallyConsume              TypicallyConsume
  californiaProducts            CaliforniaProducts
  newProductsInDifferentCategory NewProductsInDifferentCategory
  typicalProducts               TypicalProducts
  popularProducts               PopularProducts
  staffFavorites                StaffFavorites
  cart                          CartModel[]
  orders                        OrderModel[]
  transactions                  TransactionModel[]
  invoice Invoice[]
     createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  @@map("customers")
 
}

// Admin model (extends User for admin-specific details)
model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userName  String   @unique
  email     String   @unique
  user      User?    @relation(fields: [email], references: [email])
 

   createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("admins")
}

// Product model
model Product {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  mainPrice         Float        
  status            ProductStatus @default(ACTIVE)
  details           String
  categoryId        String       @db.ObjectId
  brandId           String?      @db.ObjectId
  category          Category     @relation(fields: [categoryId], references: [id])
  brand             Brand?       @relation(fields: [brandId], references: [id])
  reviews           ReviewModel[]
  carts             CartModel[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("products")
}


// Category model
model Category {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String
  products     Product[]
   createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("categories")
}

// Brand model
model Brand {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  brandName  String
  brandImage String
  products   Product[]
   createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("brands")
}

// CartModel (Tracks items added to a user's cart)
model CartModel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
 
  quantity    Int
  totalPrice  Float
  customerId  String   @db.ObjectId
  productId   String   @db.ObjectId
  customer    Customer @relation(fields: [customerId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
   createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt


  @@map("cartModels")
}

// OrderModel (Represents a customer's order)
model OrderModel {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  customerId   String            @db.ObjectId
  customer     Customer          @relation(fields: [customerId], references: [id])
  products     Json              // List of products with quantities
  totalAmount  Float
  status       OrderStatus       @default(PENDING)
  
  transactions TransactionModel[]
   createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("orders")
  Invoice Invoice[]
}

// TransactionModel (Tracks payments for orders)
model TransactionModel {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String     @db.ObjectId
  orderId         String     @db.ObjectId
  customer        Customer   @relation(fields: [customerId], references: [id])
  order           OrderModel @relation(fields: [orderId], references: [id])
  transactionId   String     @unique // Payment gateway's ID
  amount          Float
  paymentMethod   String
  recipient       String
  transactionDate DateTime   @default(now())
 createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  @@map("transactions")
}

// BillingAddress (Stores billing address for an order)
model BillingAddress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  city       String
  state      String
  zipCode    String
  address    String
  couponCode String?
 Invoice Invoice[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  @@map("billingAddress")
 
}

// ReviewModel (Tracks product reviews by customers)
model ReviewModel {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  review     String
  productId  String     @db.ObjectId
  customerId String     @db.ObjectId
  product    Product    @relation(fields: [productId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id])
 createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  @@map("reviews")
}
model Invoice {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String        @db.ObjectId
  order            OrderModel    @relation(fields: [orderId], references: [id])
  customerId       String        @db.ObjectId
  customer         Customer      @relation(fields: [customerId], references: [id])
  invoiceNumber    String        @unique
  billingAddressId String?       @db.ObjectId
  billingAddress   BillingAddress? @relation(fields: [billingAddressId], references: [id])
  amount           Float
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("invoices")
}


model Coupon {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  code           String    @unique
  discountType   CouponDiscountType
  discountValue  Float
  minOrderAmount Float?
  usageLimit     Int?
  usedCount      Int       @default(0)
  expirationDate DateTime
  status         CouponStatus @default(ACTIVE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("coupons")
}

enum CouponDiscountType {
  PERCENTAGE
  FIXED
}
enum ProductStatus {
  ACTIVE     
  UPCOMING   
  SELLING   
}
enum CouponStatus {
  ACTIVE
  EXPIRED
  INACTIVE
}


enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum FamiliarityType {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum ExperienceEffect {
  SENSUAL
  HUNGRY
  CREATIVE
  CALM
  MINDFUL
  MOTIVATED
  ALERT
  WORRIED
  STONED
  HAPPY
  ENERGIZED
  RELAXED
  EUPHORIC
}

enum TerpeneProfile {
  ALL
  APPLE
  BANANA
  BERRY
  CANDY
  EARTHY
  FLORAL
  GASSY
  GRAPES
  LEMON
  MINT
  NUTTY
  ORANGE
  PEACH
  PEPPERY
  PINE
  STRAWBERRY
  SWEET
  WOOD
}

enum Categories {
  ALL
  FLOWER
  EDIBLES
  VAPES
  CONCENTRATES
  PREROLLS
}

enum Strain {
  INDICA
  SATIVA
  HYBRID
  SATIVADOMINANT
  INDICADOMINANT
  NO
}

enum TasteFlavor {
  ALOT
  KINDOF
  NOTATALL
}

enum OftenConsume {
  EVERYDAY
  Often
  SOMETIMES
  RARELY
  NEVER
}

enum TypicallyConsume {
  DAYTIME
  MIDDAY
  NIGHTTIME
  ANYTIME
}

enum CaliforniaProducts {
  YES
  NO
}

enum NewProductsInDifferentCategory {
  YES
  NO
}

enum TypicalProducts {
  HIGHEND
  MIDRANGE
  BUDGET
  NOBUDGET
}

enum PopularProducts {
  YES
  KINDOF
  DOESNOTREALLYMATTER
  NO
}

enum StaffFavorites {
  YES
  NO
}
